------------ Add properties and relationships together to a node as property ------------


MATCH (n)
OPTIONAL MATCH (n)-[r]->(m)  // Match outgoing relationships
OPTIONAL MATCH (n)<-[r2]-(m2)  // Match incoming relationships
WITH n, 
     collect(r) + collect(r2) AS relationships, 
     collect(m) + collect(m2) AS neighbors
SET n.concatenated_properties = 
    "Node properties: " + 
    REDUCE(acc = "", key IN keys(n) | acc + key + " is " + toString(n[key]) + ", ") +
    " Connected to: " + 
    REDUCE(acc = "", idx IN range(0, size(neighbors) - 1) | 
        acc + type(relationships[idx]) + " -> " + 
        REDUCE(acc2 = "", key IN keys(neighbors[idx]) | 
            acc2 + key + " is " + toString(neighbors[idx][key]) + ", ") + "; ")
RETURN n


--------- To create vectors for each node where the concatenated_properties property is not NULL, you can adapt the query by replacing hp.bio with hp.concatenated_properties ----------


MATCH (hp:HealthcareProvider)
WHERE hp.concatenated_properties IS NOT NULL
WITH hp, genai.vector.encode(
    hp.concatenated_properties,
    "OpenAI",
    {
      token: $openAiApiKey,
      endpoint: $openAiEndpoint
    }) AS vector
WITH hp, vector
WHERE vector IS NOT NULL
CALL db.create.setNodeVectorProperty(hp, "comprehensiveEmbedding", vector)
RETURN hp



------- pliggin cypher

CALL gds.beta.installer.installAll('vector', 'huggingface')
CALL gds.alpha.config.set('vector.encoding.provider', 'huggingface')
